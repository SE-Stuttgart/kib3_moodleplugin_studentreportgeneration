{"version":3,"file":"page_selection.min.js","sources":["../src/page_selection.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {\n    render\n} from 'core/templates';\n\n/**\n * Create and support the data viewing in html.\n *\n * @module     mod_srg/page_selection\n * @copyright  2024 University of Stuttgart <kasra.habib@iste.uni-stuttgart.de>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n/**\n * Support for file_selection.js, call only after rendering template/file_navigation.\n * Initialize the page-selection UI and render pagination and content.\n * Render the pagination template.\n * @param {array} pages - Array of pages to be used in the template pagination.\n */\nexport function initPageSelection(pages) {\n    const topPagination = document.querySelector(\".srg-page-navigation-container-top\");\n    const bottomPagination = document.querySelector(\".srg-page-navigation-container-bottom\");\n\n    // Render the \"page_navigation\" Mustache template with the generated pages array\n    const templateContext = { pages: pages };\n\n    render('mod_srg/pagination', templateContext).then((html) => {\n        // Render pagination HTML.\n        topPagination.innerHTML = html;\n        bottomPagination.innerHTML = html;\n\n        // Setup pagination Listeners.\n        initPaginationListeners(topPagination);\n        initPaginationListeners(bottomPagination);\n\n        // Set the first page as active by default.\n        setActivePage(0);\n        return undefined;\n    }).catch(ex => {\n        window.console.error('Template rendering failed: ', ex);\n    });\n}\n\n\n/**\n * Setup the Pagination Listeners.\n * @param {Element} paginationContainerElement - The HTML element, that is parent to the pagination.\n */\nfunction initPaginationListeners(paginationContainerElement) {\n    // DataElement contains some data necessary for synchronous pagination (such as current page index).\n    const dataElement = document.querySelector(\".srg-page-container\");\n\n    const first = paginationContainerElement.querySelector(\".srg-page-nav-first .page-link\");\n    const previous = paginationContainerElement.querySelector(\".srg-page-nav-previous .page-link\");\n    const pages = paginationContainerElement.querySelectorAll(\".srg-page-nav-page .page-link\");\n    const next = paginationContainerElement.querySelector(\".srg-page-nav-next .page-link\");\n    const last = paginationContainerElement.querySelector(\".srg-page-nav-last .page-link\");\n\n\n    // First Page.\n    first.addEventListener(\"click\", (event) => {\n        event.preventDefault();\n        // Get the index of the currently active Page.\n        const activePageIndex = parseInt(dataElement.dataset.activePageIndex, 10);\n        if (activePageIndex > 0) {\n            setActivePage(0);\n        }\n    });\n\n    // Previous Page.\n    previous.addEventListener(\"click\", (event) => {\n        event.preventDefault();\n        // Get the index of the currently active Page.\n        const activePageIndex = parseInt(dataElement.dataset.activePageIndex, 10);\n        if (activePageIndex > 0) {\n            setActivePage(activePageIndex - 1);\n        }\n    });\n\n    // Direct Pages.\n    pages.forEach((page, index) => {\n        page.addEventListener(\"click\", (event) => {\n            event.preventDefault();\n            // Get the index of the currently active Page.\n            const activePageIndex = parseInt(dataElement.dataset.activePageIndex, 10);\n            if (activePageIndex !== index) {\n                setActivePage(index);\n            }\n        });\n    });\n\n    // Next Page.\n    next.addEventListener(\"click\", (event) => {\n        event.preventDefault();\n        // Get the index of the currently active Page.\n        const activePageIndex = parseInt(dataElement.dataset.activePageIndex, 10);\n        if (activePageIndex < pages.length - 1) {\n            setActivePage(activePageIndex + 1);\n        }\n    });\n\n    // Last Page.\n    last.addEventListener(\"click\", (event) => {\n        event.preventDefault();\n        // Get the index of the currently active Page.\n        const activePageIndex = parseInt(dataElement.dataset.activePageIndex, 10);\n        if (activePageIndex < pages.length - 1) {\n            setActivePage(pages.length - 1);\n        }\n    });\n}\n\n/**\n * Sets a new active tab and updates the tab content.\n * @param {int} nextPageIndex - Index of the new active tab.\n */\nfunction setActivePage(nextPageIndex) {\n    const dataElement = document.querySelector(\".srg-page-container\");\n    const topPagination = document.querySelector(\".srg-page-navigation-container-top\");\n    const bottomPagination = document.querySelector(\".srg-page-navigation-container-bottom\");\n\n    // Update the active page index information.\n    dataElement.dataset.activePageIndex = nextPageIndex;\n\n    updatePaginationVisibilityStates(topPagination, nextPageIndex);\n    updatePaginationVisibilityStates(bottomPagination, nextPageIndex);\n\n    // Get the head and data for the currently active file/tab.\n    const tabs = document.querySelectorAll(\".srg-tab-container .nav-link\");\n    const activeTab = tabs[dataElement.dataset.activeFileIndex];\n    const head = JSON.parse(atob(activeTab.getAttribute(\"data-head\") || \"e30=\"));\n    const data = JSON.parse(atob(activeTab.getAttribute(\"data-content\") || \"e30=\"));\n\n    // Get the content for the currently active page.\n    const content = data[dataElement.dataset.activePageIndex].rows;\n\n    renderTable(head, content);\n}\n\n/**\n * Disable/enable and hide/show pagination links.\n * @param {Element} paginationContainerElement - The HTML element, that is parent to the pagination.\n * @param {int} pageIndex - The active page index.\n */\nfunction updatePaginationVisibilityStates(paginationContainerElement, pageIndex) {\n    const first = paginationContainerElement.querySelector(\".srg-page-nav-first\");\n    const previous = paginationContainerElement.querySelector(\".srg-page-nav-previous\");\n    const leftEllipsis = paginationContainerElement.querySelector(\".srg-page-nav-ellipsis-left\");\n    const pages = paginationContainerElement.querySelectorAll(\".srg-page-nav-page\");\n    const rightEllipsis = paginationContainerElement.querySelector(\".srg-page-nav-ellipsis-right\");\n    const next = paginationContainerElement.querySelector(\".srg-page-nav-next\");\n    const last = paginationContainerElement.querySelector(\".srg-page-nav-last\");\n\n    // We only want to show page numbers close to the current number.\n    const offset = 5;\n\n    const isFirst = pageIndex === 0;\n    const isLast = pageIndex === pages.length - 1;\n    const isFirstHidden = pageIndex - offset > 0;\n    const isLastHidden = pageIndex + offset < pages.length - 1;\n\n    first.classList.toggle(\"disabled\", isFirst);\n    previous.classList.toggle(\"disabled\", isFirst);\n    leftEllipsis.classList.toggle(\"srg-hidden\", !isFirstHidden);\n    rightEllipsis.classList.toggle(\"srg-hidden\", !isLastHidden);\n    next.classList.toggle(\"disabled\", isLast);\n    last.classList.toggle(\"disabled\", isLast);\n\n    pages.forEach((page, index) => {\n        const isActive = index === pageIndex;\n        page.classList.toggle(\"active\", isActive);\n        page.setAttribute(\"aria-selected\", isActive ? \"true\" : \"false\");\n\n        const isHidden = Math.abs(pageIndex - index) > offset;\n        page.classList.toggle(\"srg-hidden\", isHidden);\n    });\n}\n\n/**\n * Render the content as a table.\n * @param {array} head - The column headers for the table.\n * @param {array} content - The content rows for the table.\n */\nfunction renderTable(head, content) {\n    const tableContainer = document.querySelector(\".srg-tab-content-container\");\n\n    const templateContext = { head: head, rows: content };\n    render('mod_srg/table', templateContext).then((html) => {\n        tableContainer.innerHTML = html;\n        return undefined;\n    }).catch(ex => {\n        window.console.error('Template rendering failed: ', ex);\n    });\n}"],"names":["initPaginationListeners","paginationContainerElement","dataElement","document","querySelector","first","previous","pages","querySelectorAll","next","last","addEventListener","event","preventDefault","parseInt","dataset","activePageIndex","setActivePage","forEach","page","index","length","nextPageIndex","topPagination","bottomPagination","updatePaginationVisibilityStates","activeTab","activeFileIndex","head","content","tableContainer","templateContext","rows","then","html","innerHTML","catch","ex","window","console","error","renderTable","JSON","parse","atob","getAttribute","pageIndex","leftEllipsis","rightEllipsis","isFirst","isLast","isFirstHidden","isLastHidden","classList","toggle","isActive","setAttribute","isHidden","Math","abs"],"mappings":"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"}